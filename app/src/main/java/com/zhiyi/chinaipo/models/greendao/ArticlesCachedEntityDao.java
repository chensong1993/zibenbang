package com.zhiyi.chinaipo.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhiyi.chinaipo.models.entity.articles.ArticlesCachedEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLES_CACHED_ENTITY".
*/
public class ArticlesCachedEntityDao extends AbstractDao<ArticlesCachedEntity, Void> {

    public static final String TABLENAME = "ARTICLES_CACHED_ENTITY";

    /**
     * Properties of entity ArticlesCachedEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CategoryId = new Property(0, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property NewsType = new Property(6, String.class, "newsType", false, "NEWS_TYPE");
        public final static Property ClickCounter = new Property(7, int.class, "clickCounter", false, "CLICK_COUNTER");
        public final static Property OriginalId = new Property(8, int.class, "originalId", false, "ORIGINAL_ID");
        public final static Property CommentCounter = new Property(9, int.class, "commentCounter", false, "COMMENT_COUNTER");
        public final static Property Newstime = new Property(10, String.class, "newstime", false, "NEWSTIME");
        public final static Property Titlepic = new Property(11, String.class, "titlepic", false, "TITLEPIC");
    }


    public ArticlesCachedEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArticlesCachedEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLES_CACHED_ENTITY\" (" + //
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 0: categoryId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TITLE\" TEXT," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"AUTHOR\" TEXT," + // 4: author
                "\"SOURCE\" TEXT," + // 5: source
                "\"NEWS_TYPE\" TEXT," + // 6: newsType
                "\"CLICK_COUNTER\" INTEGER NOT NULL ," + // 7: clickCounter
                "\"ORIGINAL_ID\" INTEGER NOT NULL ," + // 8: originalId
                "\"COMMENT_COUNTER\" INTEGER NOT NULL ," + // 9: commentCounter
                "\"NEWSTIME\" TEXT," + // 10: newstime
                "\"TITLEPIC\" TEXT);"); // 11: titlepic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLES_CACHED_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticlesCachedEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategoryId());
        stmt.bindLong(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String newsType = entity.getNewsType();
        if (newsType != null) {
            stmt.bindString(7, newsType);
        }
        stmt.bindLong(8, entity.getClickCounter());
        stmt.bindLong(9, entity.getOriginalId());
        stmt.bindLong(10, entity.getCommentCounter());
 
        String newstime = entity.getNewstime();
        if (newstime != null) {
            stmt.bindString(11, newstime);
        }
 
        String titlepic = entity.getTitlepic();
        if (titlepic != null) {
            stmt.bindString(12, titlepic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticlesCachedEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCategoryId());
        stmt.bindLong(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String newsType = entity.getNewsType();
        if (newsType != null) {
            stmt.bindString(7, newsType);
        }
        stmt.bindLong(8, entity.getClickCounter());
        stmt.bindLong(9, entity.getOriginalId());
        stmt.bindLong(10, entity.getCommentCounter());
 
        String newstime = entity.getNewstime();
        if (newstime != null) {
            stmt.bindString(11, newstime);
        }
 
        String titlepic = entity.getTitlepic();
        if (titlepic != null) {
            stmt.bindString(12, titlepic);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ArticlesCachedEntity readEntity(Cursor cursor, int offset) {
        ArticlesCachedEntity entity = new ArticlesCachedEntity( //
            cursor.getInt(offset + 0), // categoryId
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // newsType
            cursor.getInt(offset + 7), // clickCounter
            cursor.getInt(offset + 8), // originalId
            cursor.getInt(offset + 9), // commentCounter
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // newstime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // titlepic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticlesCachedEntity entity, int offset) {
        entity.setCategoryId(cursor.getInt(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNewsType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClickCounter(cursor.getInt(offset + 7));
        entity.setOriginalId(cursor.getInt(offset + 8));
        entity.setCommentCounter(cursor.getInt(offset + 9));
        entity.setNewstime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitlepic(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ArticlesCachedEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ArticlesCachedEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ArticlesCachedEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
