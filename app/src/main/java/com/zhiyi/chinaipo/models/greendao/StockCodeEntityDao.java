package com.zhiyi.chinaipo.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhiyi.chinaipo.models.db.StockCodeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK_CODE_ENTITY".
*/
public class StockCodeEntityDao extends AbstractDao<StockCodeEntity, Long> {

    public static final String TABLENAME = "STOCK_CODE_ENTITY";

    /**
     * Properties of entity StockCodeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
        public final static Property Pct = new Property(5, String.class, "pct", false, "PCT");
        public final static Property Turnover = new Property(6, String.class, "turnover", false, "TURNOVER");
    }


    public StockCodeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StockCodeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK_CODE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"TOKEN\" TEXT," + // 1: token
                "\"NAME\" TEXT," + // 2: name
                "\"CODE\" TEXT," + // 3: code
                "\"PRICE\" TEXT," + // 4: price
                "\"PCT\" TEXT," + // 5: pct
                "\"TURNOVER\" TEXT);"); // 6: turnover
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK_CODE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StockCodeEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        String pct = entity.getPct();
        if (pct != null) {
            stmt.bindString(6, pct);
        }
 
        String turnover = entity.getTurnover();
        if (turnover != null) {
            stmt.bindString(7, turnover);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StockCodeEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        String pct = entity.getPct();
        if (pct != null) {
            stmt.bindString(6, pct);
        }
 
        String turnover = entity.getTurnover();
        if (turnover != null) {
            stmt.bindString(7, turnover);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StockCodeEntity readEntity(Cursor cursor, int offset) {
        StockCodeEntity entity = new StockCodeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pct
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // turnover
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StockCodeEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPct(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTurnover(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StockCodeEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StockCodeEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StockCodeEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
