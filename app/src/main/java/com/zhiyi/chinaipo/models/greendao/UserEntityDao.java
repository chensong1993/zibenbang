package com.zhiyi.chinaipo.models.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.zhiyi.chinaipo.models.entity.UserEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserEntity".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "UserEntity";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "NICKNAME");
        public final static Property MobilePhone = new Property(7, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property AvatarUrl = new Property(9, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property Area = new Property(10, String.class, "area", false, "AREA");
        public final static Property Point = new Property(11, String.class, "point", false, "POINT");
        public final static Property Signature = new Property(12, String.class, "signature", false, "SIGNATURE");
        public final static Property Token = new Property(13, String.class, "token", false, "TOKEN");
        public final static Property Description = new Property(14, String.class, "description", false, "DESCRIPTION");
        public final static Property PhotoUrl = new Property(15, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property CompanyName = new Property(16, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property Department = new Property(17, String.class, "department", false, "DEPARTMENT");
        public final static Property Classify = new Property(18, String.class, "classify", false, "CLASSIFY");
        public final static Property Focused = new Property(19, String.class, "focused", false, "FOCUSED");
        public final static Property Stocks = new Property(20, String.class, "stocks", false, "STOCKS");
        public final static Property FullName = new Property(21, String.class, "fullName", false, "FULL_NAME");
        public final static Property QqToken = new Property(22, String.class, "qqToken", false, "QQ_TOKEN");
        public final static Property WbToken = new Property(23, String.class, "wbToken", false, "WB_TOKEN");
        public final static Property WxToken = new Property(24, String.class, "wxToken", false, "WX_TOKEN");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserEntity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"PASSWORD\" TEXT," + // 3: password
                "\"NAME\" TEXT," + // 4: name
                "\"GENDER\" TEXT," + // 5: gender
                "\"NICKNAME\" TEXT," + // 6: nickname
                "\"MOBILE_PHONE\" TEXT," + // 7: mobilePhone
                "\"EMAIL\" TEXT," + // 8: email
                "\"AVATAR_URL\" TEXT," + // 9: avatarUrl
                "\"AREA\" TEXT," + // 10: area
                "\"POINT\" TEXT," + // 11: point
                "\"SIGNATURE\" TEXT," + // 12: signature
                "\"TOKEN\" TEXT," + // 13: token
                "\"DESCRIPTION\" TEXT," + // 14: description
                "\"PHOTO_URL\" TEXT," + // 15: photoUrl
                "\"COMPANY_NAME\" TEXT," + // 16: companyName
                "\"DEPARTMENT\" TEXT," + // 17: department
                "\"CLASSIFY\" TEXT," + // 18: classify
                "\"FOCUSED\" TEXT," + // 19: focused
                "\"STOCKS\" TEXT," + // 20: stocks
                "\"FULL_NAME\" TEXT," + // 21: fullName
                "\"QQ_TOKEN\" TEXT," + // 22: qqToken
                "\"WB_TOKEN\" TEXT," + // 23: wbToken
                "\"WX_TOKEN\" TEXT);"); // 24: wxToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserEntity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
       /* Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(8, mobilePhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(10, avatarUrl);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(11, area);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(12, point);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(13, signature);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(16, photoUrl);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(17, companyName);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(18, department);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(19, classify);
        }
 
        String focused = entity.getFocused();
        if (focused != null) {
            stmt.bindString(20, focused);
        }
 
        String stocks = entity.getStocks();
        if (stocks != null) {
            stmt.bindString(21, stocks);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(22, fullName);
        }
 
        String qqToken = entity.getQqToken();
        if (qqToken != null) {
            stmt.bindString(23, qqToken);
        }
 
        String wbToken = entity.getWbToken();
        if (wbToken != null) {
            stmt.bindString(24, wbToken);
        }
 
        String wxToken = entity.getWxToken();
        if (wxToken != null) {
            stmt.bindString(25, wxToken);
        }*/
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        /*Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(8, mobilePhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(10, avatarUrl);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(11, area);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(12, point);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(13, signature);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(16, photoUrl);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(17, companyName);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(18, department);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(19, classify);
        }
 
        String focused = entity.getFocused();
        if (focused != null) {
            stmt.bindString(20, focused);
        }
 
        String stocks = entity.getStocks();
        if (stocks != null) {
            stmt.bindString(21, stocks);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(22, fullName);
        }
 
        String qqToken = entity.getQqToken();
        if (qqToken != null) {
            stmt.bindString(23, qqToken);
        }
 
        String wbToken = entity.getWbToken();
        if (wbToken != null) {
            stmt.bindString(24, wbToken);
        }
 
        String wxToken = entity.getWxToken();
        if (wxToken != null) {
            stmt.bindString(25, wxToken);
        }*/
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
          /*  cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobilePhone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avatarUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // area
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // point
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // signature
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // token
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // description
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // photoUrl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // companyName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // department
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // classify
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // focused
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // stocks
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // fullName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // qqToken
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // wbToken
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // wxToken*/
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
       /* entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobilePhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAvatarUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArea(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPoint(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSignature(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setToken(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDescription(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhotoUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompanyName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDepartment(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setClassify(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFocused(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStocks(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFullName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setQqToken(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setWbToken(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setWxToken(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));*/
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
      //  entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
      /*  if(entity != null) {
            return entity.getId();
        } else {*/
            return null;
       // }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return false; //entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
